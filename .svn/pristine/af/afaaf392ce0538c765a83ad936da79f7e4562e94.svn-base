<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="myRealm" class="com.tuzhi.delivery.shiro.realm.MyRealm">
		<!-- 将声明的密码匹配器注入到自定义 Realm 的属性中去 -->
		<!-- <property name="credentialsMatcher" ref="credentialsMatcher" /> -->
		<!-- 将自定义的权限匹配器注入到自定义 Realm 中 -->
		<!-- <property name="permissionResolver" ref="permissionResolver" /> -->
		<!-- 配置缓存相关 -->
		<!-- 启用缓存 -->
		<property name="cachingEnabled" value="true" />
		<!-- 开启认证缓存 -->
		<property name="authenticationCachingEnabled" value="false" />
		<!-- 指定认证缓存的名字(与 ehcache.xml 中声明的相同) -->
		<property name="authenticationCacheName" value="shiro-authenticationCache" />
		<!--开启授权缓存 -->
		<!-- <property name="authorizationCachingEnabled" value="true" /> -->
		<!-- 指定授权缓存的名字(与 ehcache.xml 中声明的相同) -->
		<!-- <property name="authorizationCacheName" value="shiro-authorizationCache" 
			/> -->
	</bean>

	<!-- 声明一个密码匹配器 -->
	<bean id="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!-- 设置该密码匹配器使用的算法是 md5 -->
		<property name="hashAlgorithmName" value="md5" />
	</bean>

	<!-- 定义缓存管理器 -->
	<bean id="ehcCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>


	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<!-- 使用配置的缓存管理器 -->
		<property name="cacheManager" ref="ehcCacheManager"></property>
		<!-- 会话管理 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- rememberMe管理器 -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<!-- <property name="successUrl" value="/system/main"/> -->
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<!-- (注意URL Pattern里用到的是两颗星,这样才能实现任意层次的全匹配) /admin/** -->
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/ = anon
				/home/** = anon
				/zone/** = anon
				/user/admin/**= anon
				/login.jsp = anon
				/homePage.jsp = anon
				/deliverySearch.jsp = anon
				/statistics.jsp = anon
				/mapView.jsp = anon
				/register.jsp = anon
				/delivery/getDeliveryByParam = anon
				/** = user,urlPermissionFilter
			</value>
		</property>
		
	</bean>

	<!-- 自定义加入filter，起在remember me session失效情况下刷新session作用 -->  
	<bean id="userSettingFilter" class="com.tuzhi.delivery.shiro.filter.UserSetting" />
	<!-- 声明一个自定义的过滤器 -->
	<bean id="urlPermissionFilter" class="com.tuzhi.delivery.shiro.permission.UrlPermissionFilter"> 
		<!-- 为上面声明的自定义过滤器注入属性值 /docs kanshangmian  -->
		<property name="errorUrl" value="/unauthorized.jsp"/> 
	</bean>

	<!-- 自定义一个权限匹配器 -->
	<!-- <bean id="permissionResolver" class="com.tuzhi.delivery.shiro.permission.UrlPermissionResolver" 
		/> -->


	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"/> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->

	<!-- 会话session相关 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />

		<!-- <property name="sessionValidationSchedulerEnabled" value="false" /> 
			<property name="sessionValidationScheduler" ref="sessionValidationScheduler" 
			/> -->
		<!-- <property name="sessionDAO" ref="sessionDAO" /> <property name="sessionIdCookieEnabled" 
			value="true" /> -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	<!-- 会话ID生成器 -->
	<!-- <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" 
		/> -->
	<!-- 会话DAO -->
	<!-- <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" 
		/> <property name="sessionIdGenerator" ref="sessionIdGenerator" /> </bean> -->
	<!-- 会话验证调度器 -->
	<!-- <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"> 
		<property name="sessionValidationInterval" value="1800000" /> <property name="sessionManager" 
		ref="sessionManager" /> </bean> -->
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="session_ai_id" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="-1" />
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="3600" /><!-- 7days:604800 -->
	</bean>
	
</beans>  